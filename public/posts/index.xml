<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Alan Wang</title>
    <link>http://wlchn.github.io/posts/</link>
    <description>Recent content in Posts on Alan Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Aug 2022 00:00:00 +0800</lastBuildDate><atom:link href="http://wlchn.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mac解决too-many-open-files问题</title>
      <link>http://wlchn.github.io/posts/mac-too-many-open-files/</link>
      <pubDate>Wed, 10 Aug 2022 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/mac-too-many-open-files/</guid>
      <description>查看 maxfiles 设置
launchctl limit 设置一个较大的 maxfiles
sudo launchctl limit maxfiles 102400 102400 查看应用资源情况
lsof -n | awk &amp;#39;{print $1}&amp;#39; | uniq -c | sort -rn | head </description>
    </item>
    
    <item>
      <title>Kubernetes-watch-golang实现</title>
      <link>http://wlchn.github.io/posts/kubernetes-watch-golang/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/kubernetes-watch-golang/</guid>
      <description>第一种方法 使用k8s.io/client-go/tools/cache
func StartWatchingServices(c *Client) { watchlist := cache.NewListWatchFromClient( c.K8sClientset.CoreV1().RESTClient(), string(v1.ResourceServices), v1.NamespaceAll, fields.Everything(), ) _, controller := cache.NewInformer( watchlist, &amp;amp;v1.Service{}, 0, //Duration is int64 cache.ResourceEventHandlerFuncs{ AddFunc: func(obj interface{}) { fmt.Printf(&amp;#34;added: %s \n&amp;#34;, obj) }, DeleteFunc: func(obj interface{}) { fmt.Printf(deleted: %s \n&amp;#34;, obj) }, UpdateFunc: func(oldObj, newObj interface{}) { fmt.Printf(&amp;#34;changed \n&amp;#34;) }, }, ) stop := make(chan struct{}) defer close(stop) go controller.Run(stop) for { time.Sleep(time.Second) } } 第二种方法 使用k8s.io/client-go/informers，可以 watch CRD 资源但需要使用 code-generator 生成 clientset 和 informer(指 CRD 资源)。</description>
    </item>
    
    <item>
      <title>利用Keycloak实现Kubernetes单点登录与权限验证（SSO,OIDC,RBAC）</title>
      <link>http://wlchn.github.io/posts/keycloak-kubernetes-sso-oidc-rbac/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/keycloak-kubernetes-sso-oidc-rbac/</guid>
      <description>本文将详细介绍如何利用 Keycloak 配置 Kubernetes 登录验证，以及 RBAC 管理。 本文全部为测试环境工具。 流程示意 配置 Keycloak 安装配置 生产环境不建议使用 docker 直接部署 Keycloak。如果使用 nginx 需要将PROXY_ADDRESS_FORWARDING配置成true.
sudo docker run -e KEYCLOAK_USER=wanglei -e KEYCLOAK_PASSWORD=your_password -e PROXY_ADDRESS_FORWARDING=true -p 8081:8080 -d jboss/keycloak 配置 nginx 将 server_name 配置成你的域名,代理 Keycloak 端口，注意上面PROXY_ADDRESS_FORWARDING=true
server { listen 80; server_name key.wanglei.me; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://localhost:8081; } } 在 Clients 中创建 kubernetes 设置Client ID为kubernetes，Client Protocol选择openid-connect即 OIDC 协议。 设置 Client 将Access Type设置为confidential, Valid Redirect URIs根据需要设置，本文后面用到 kubelogin,需要设置为http://localhost:8000 记录 Client Secret 在 Credentials 中找到 Secret，后面需要用到。 新建 Mapper 选择Mapper Type为User Attribute,选择Claim JSON Type为String,下面开关一律选on(可根据需求更改)。此处Token Claim Name字段设置为groups,后面配置 kube-apiserver 会用到。 为 User 添加 Attribute 添加 key groups, value admin,然后点击 add，再 save。 配置 kubernetes 此处使用 kind(kubernetes in docker) https://github.</description>
    </item>
    
    <item>
      <title>使用scratch构建最小化Go程序的docker-image</title>
      <link>http://wlchn.github.io/posts/scratch-go-docker-image/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/scratch-go-docker-image/</guid>
      <description>由于 Golang 编译之后的文件是二进制，而 scratch 是 docker 最基础的空 image，所以可以使用 scratch 来构建 Go 程序的 docker image，使得最终构建的 image 最小化.
构建 image 过程分为两步：
在 Go 基础 image 中 build. 将 build 好的二进制文件拷贝到 scratch image 中。 无需 cgo 的程序 对于无需 cgo 交叉编译的程序，使用 scratch 来作为最终运行的基础 image 非常合适。
首先，选择合适版本的 golang 基础 image 来 build，这里没有必要选择更小的 golang alpine，build 过程中 pull 一般会有缓存所以 pull 速度差别不大，此外 alpine 中没有 git 和 ssl，我们在构建 image 过程中都有可能用到，况且 alpine 也不会影响最终 image 大小。
FROM golang:1.13 AS builder 禁掉 cgo 交叉编译，我们服务器一般为 linux amd64，build 二进制文件。</description>
    </item>
    
    <item>
      <title>不同域名之间共享localStorage-sessionStorage</title>
      <link>http://wlchn.github.io/posts/share-localstorage-sessionstorage/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/share-localstorage-sessionstorage/</guid>
      <description>问题 两个不同的域名的 localStorage 不能直接互相访问。那么如何在aaa.com中如何调用bbb.com的 localStorage?
实现原理 1.在aaa.com的页面中，在页面中嵌入一个 src 为bbb.com的iframe，此时这个iframe里可以调用bbb.com的 localStorage。 2.用postMessage方法实现页面与iframe之间的通信。 综合 1、2 便可以实现aaa.com中调用bbb.com的 localStorage。
优化 iframe 我们可以在bbb.com中写一个专门负责共享 localStorage 的页面，例如叫做page1.html，这样可以防止无用的资源加载到iframe中。
示例 以在aaa.com中读取bbb.com中的 localStorage 的item1为例，写同理： bbb.com中page1.html，监听aaa.com通过postMessage传来的信息，读取 localStorage，然后再使用postMessage方法传给aaa.com的接收者。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en-US&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; window.addEventListener(&amp;#39;message&amp;#39;, function(event) { if (event.origin === &amp;#39;https://aaa.com&amp;#39;) { const { key } = event.data; const value = localStorage.getItem(key); event.source.postMessage({wallets: wallets}, event.origin); } }, false); &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; This page is for sharing localstorage. &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 在aaa.com的页面中加入一个 src 为bbb.</description>
    </item>
    
    <item>
      <title>三门问题（蒙提霍尔悖论）分析与Golang模拟</title>
      <link>http://wlchn.github.io/posts/three-doors-golang/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/three-doors-golang/</guid>
      <description>问题描述 三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目 Let&amp;rsquo;s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？
答案 答案是会。不换门的话，赢得汽车的几率是 1/3。换门的话，赢得汽车的几率是 2/3。
争议 有人认为，在主持人排除了一个门之后，汽车只可能在另外两个门中，所以在两扇门的概率各是 1/2。
分析 首先参赛者选定了一扇门，主持人未开启门时，汽车在这扇门的概率为 1/3，在另外两扇门中的概率为 2/3，此时争议不大。而另外两扇门中必定至少有一扇是山羊，所以即使主持人指出这两扇门中一扇是山羊，并不会影响这两扇门的概率，两扇概率和仍为 2/3，此时一扇已知是山羊，所以两扇中的另外一扇是汽车的概率是 2/3。所以换门会提高概率。
思考 如果主持人开启揭露一扇门是山羊后，另外一个人 B 此时在剩下的两扇门中做抉择，并且他不知道其他信息，只知道一扇是汽车，一扇是羊，那么此时 B 选择到汽车的概率是 1/2。 这是因为没有之前的信息，B 不知道那扇门概率大，B 此时是在两扇门中做随机选择，B 可能有 1/2 的概率选择 A(参赛者)开始选择的门，也有 1/2 的概率选择 A 将要换的门。所以 B 选择到汽车的概率为 1/2 _ 1/3 + 1/2 _ 2/3 = 1/2。
程序模拟 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;time&amp;#34; ) func main() { totalTimes := 1000000 aRightTimes := 0 bRightTimes := 0 rand.</description>
    </item>
    
    <item>
      <title>Median-of-medians无序数组寻找中位数最差O(n)复杂度JS实现</title>
      <link>http://wlchn.github.io/posts/median-of-medians-js/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/median-of-medians-js/</guid>
      <description>在无序数组中寻找中位数，最差复杂度为 O(n). 实现算法为 Median of medians，又叫 BFPRT 算法。 实现原理与复杂度研究：https://en.wikipedia.org/wiki/Median_of_medians
贴一版 JS 实现：
export const selectMedian = (arr, compare) =&amp;gt; { return selectK(arr, Math.floor(arr.length / 2), compare); }; export const selectK = (arr, k, compare) =&amp;gt; { if (!Array.isArray(arr) || arr.length === 0 || arr.length - 1 &amp;lt; k) { return; } if (arr.length === 1) { return arr[0]; } let idx = selectIdx(arr, 0, arr.length - 1, k, compare || defaultCompare); return arr[idx]; }; const partition = (arr, left, right, pivot, compare) =&amp;gt; { let temp = arr[pivot]; arr[pivot] = arr[right]; arr[right] = temp; let track = left; for (let i = left; i &amp;lt; right; i++) { // if (arr[i] &amp;lt; arr[right]) { if (compare(arr[i], arr[right]) === -1) { let t = arr[i]; arr[i] = arr[track]; arr[track] = t; track++; } } temp = arr[track]; arr[track] = arr[right]; arr[right] = temp; return track; }; const selectIdx = (arr, left, right, k, compare) =&amp;gt; { if (left === right) { return left; } let dest = left + k; while (true) { let pivotIndex = right - left + 1 &amp;lt;= 5 ?</description>
    </item>
    
    <item>
      <title>为React单页应用提供Runtime运行时环境变量</title>
      <link>http://wlchn.github.io/posts/react-spa-runtime-docker-env/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/react-spa-runtime-docker-env/</guid>
      <description>使用 create-react-app 创建的单页应用（SPA）是在 build 时注入环境变量的。一旦 build 成静态文件便不能动态提供环境变量了。 比如 build 一个单页应用的 docker image，可以在 build 时提供环境变量。但是已经 build 完成，使用 docker run 运行的时候不能再传递环境变量。 本文主要解决在运行时提供环境变量的问题。 原理：通过一段 shell 脚本将指定将 env 转换为 config.js 文件，该文件和 build 好的 static 文件 serve 在同一目录下，在应用中引用 config.js 文件，通过 window._env 获取环境变量。shell 脚本通过 docker image 的 entrypoint 执行。服务使用 go 构建的一个简单服务器，比 nginx 轻量很多。
将如下env.sh文件拷问到项目目录下，在 entrypoint（docker run）时执行，作用是将环境变量转出 config.js #!/bin/sh if [ $CONFIG_VARS ]; then # clear echo -n &amp;gt; ${CONFIG_FILE_PATH}/config.js SPLIT=$(echo $CONFIG_VARS | tr &amp;#34;,&amp;#34; &amp;#34;\n&amp;#34;) echo &amp;#34;window.</description>
    </item>
    
    <item>
      <title>Kubernetes等待部署完成-kubectl-wait-rollout</title>
      <link>http://wlchn.github.io/posts/kubernetes-kubectl-wait-rollout/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/kubernetes-kubectl-wait-rollout/</guid>
      <description>使用 kubectl apply 或者 create 命令创建/更新部署后，其 pod 需要时间完成创建/更新。 如果在 CI 中不等待所有 pod 更新完成，下一步流程很有可能使用更新前的环境。
正确方法 kubectl rollout status 根据实际情况kubectl rollout status命令，能够正确的获取 rollout status。
ATTEMPTS=0 ROLLOUT_STATUS_CMD=&amp;#34;kubectl rollout status deployment/myapp -n namespace&amp;#34; until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do $ROLLOUT_STATUS_CMD ATTEMPTS=$((attempts + 1)) sleep 10 done 以上 shell 脚本经过轮询kubectl rollout status可以很好的解决实际问题。
错误方法 kubectl wait 注意kubectl wait命令不能适用于更新部署。
kubectl wait --for=condition=available --timeout=600s deployment/myapp -n namespace 该命令只能判断 deployment 是否 available，不能用来判断 rollout，即 available 状态的 deployment，很可能老的 pod 还在 terminating，新的 pod 还没创建好。</description>
    </item>
    
    <item>
      <title>Go-WebAssembly-入门（二）</title>
      <link>http://wlchn.github.io/posts/go-webassembly-tutorial-2/</link>
      <pubDate>Sat, 02 Feb 2019 01:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/go-webassembly-tutorial-2/</guid>
      <description>系列文章 Go WebAssembly 入门（一）
Getting Started 编写 main.go
package main import ( &amp;#34;strconv&amp;#34; &amp;#34;syscall/js&amp;#34; ) // 传入value1, value2, result三个元素的id，将value1+value2结果赋给result元素 func add(ids []js.Value) { // 根据id获取输入值 value1 := js.Global().Get(&amp;#34;document&amp;#34;).Call(&amp;#34;getElementById&amp;#34;, ids[0].String()).Get(&amp;#34;value&amp;#34;).String() value2 := js.Global().Get(&amp;#34;document&amp;#34;).Call(&amp;#34;getElementById&amp;#34;, ids[1].String()).Get(&amp;#34;value&amp;#34;).String() int1, _ := strconv.Atoi(value1) int2, _ := strconv.Atoi(value2) // 将相加结果set给result元素 js.Global().Get(&amp;#34;document&amp;#34;).Call(&amp;#34;getElementById&amp;#34;, ids[2].String()).Set(&amp;#34;value&amp;#34;, int1+int2) } // 添加监听事件 func registerCallbacks() { js.Global().Set(&amp;#34;add&amp;#34;, js.NewCallback(add)) } func main() { c := make(chan struct{}, 0) println(&amp;#34;Go WebAssembly Initialized!&amp;#34;) registerCallbacks() &amp;lt;-c } 将 main.</description>
    </item>
    
    <item>
      <title>Go-WebAssembly-入门（一）</title>
      <link>http://wlchn.github.io/posts/go-webassembly-tutorial-1/</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/go-webassembly-tutorial-1/</guid>
      <description>有关 WebAssembly 的介绍可以参考 几张图让你看懂 WebAssembly 简单来说 WebAssembly 就是将其他语言 C/Go/Rust 等语言编译成 wasm 可执行二进制文件，浏览器来执行 wasm。wasm 相比 JS,拥有体积更小，执行更快，因为最终编译成二进制文件，所以一些安全策略代码也更适合 wasm。 经过尝试 C 和 Go 分别编写 WebAssembly，相较而言我认为 Go 无论从语言层面还是工具链，用起来都更加方便一些。 本文使用原生 go build，生成的 wasm 文件大约在1.4M左右，在生产环境中这个体积是很大的，优化 go 的 wasm 体积可以使用 tinygo 来 build，同样的代码使用 tinygo 构建之后约为22K，甚至比 C 语言构建 wasm 的体积还要小（C 语言 build 后约为44K，不同版本不同环境可能略有差异）。参考https://tinygo.org/
本文介绍 Go WebAssembly 入门，前提已经安装 Go 1.11 及以上版本。 系列文章 Go WebAssembly 入门（二）
Getting Started 编辑 main.go
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, Go WebAssembly!&amp;#34;) } 把 main.</description>
    </item>
    
    <item>
      <title>高性能React数据容器WatermelonDB</title>
      <link>http://wlchn.github.io/posts/try-react-watermelondb/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/try-react-watermelondb/</guid>
      <description>简介 WatermelonDB 是 React Native 和 React Web 一种新的数据状态容器，虽然称作 DB 但意义和传统 DB 还是有些区别的，它的作用更像 Redux，同 Redux 类似，WatermelonDB 也是单一数据源原则，并且数据流单向的形式，UI 会根据记录的变化而相应的改变。 WatermelonDB 比 Redux 的优势在于，对于数据记录较大的 React 应用，能提供更好的性能表现。同时 WatermelonDB 也能比 Redux 更友好的管理数据流。
示例 首先，定义 Models
class Post extends Model { @field(&amp;#39;name&amp;#39;) name @field(&amp;#39;body&amp;#39;) body @children(&amp;#39;comments&amp;#39;) comments } class Comment extends Model { @field(&amp;#39;body&amp;#39;) body @field(&amp;#39;author&amp;#39;) author } 然后 connect 数据到 components（和 Redux connect 比较像）
const Comment = ({ comment }) =&amp;gt; ( &amp;lt;View style={styles.commentBox}&amp;gt; &amp;lt;Text&amp;gt;{comment.</description>
    </item>
    
    <item>
      <title>Mac修改esc键位映射</title>
      <link>http://wlchn.github.io/posts/mac-change-esc/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/mac-change-esc/</guid>
      <description>MacBook Pro 的 touch bar 上的 esc 体验很差，尤其在频繁使用 vim 的时候，esc 不能给任何反馈，用着很不舒服。下面介绍两种方式用其它按键映射 esc(escape).
方法一 通过 Mac 自带方式 System Preferences - Keyboard - Modifier Keys 通过上面操作可以修改其它按键为 escape 按键。 此方法的缺点是不太灵活，例如选择将 option 改为 escape 时，不能选择左右，变更为 escape 后，则不能使用 option。
方法二 使用 Karabiner(KeyRemap4MacBook) 下载链接： https://pqrs.org/osx/karabiner/ 将“右 option”改为“escape”(如图)，这样使用 escape(右 option)的同时，还保留了 option(左)自身的功能。 </description>
    </item>
    
    <item>
      <title>RSA-SHA256-非对称签名与验证-sign-verify----JavaScript,-Ruby,-Golang</title>
      <link>http://wlchn.github.io/posts/rsa-sha256-sign-verify-javascript-ruby-golang/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/rsa-sha256-sign-verify-javascript-ruby-golang/</guid>
      <description>RSA 主要用法 公钥加密(encrypt)，私钥解密(decrypt) 私钥签名(sign)，公钥验证(verify) 网上讲述 RSA 原理的文字很多，很少涉及签名验证的实现。 第一种比较常见，本文主要是第二种方法的实现(JavaScript, Ruby, Golang)。 本文的 signature 最终结果都为 hex。
JavaScript sign
import { KJUR } from &amp;#39;jsrsasign&amp;#39; const msg = &amp;#34;hello world&amp;#34; const privateKey = &amp;#34;-----BEGIN RSA PRIVATE KEY-----(your private key)&amp;#34; const sig = new KJUR.crypto.Signature({ &amp;#34;alg&amp;#34;: &amp;#34;SHA256withRSA&amp;#34; }); sig.init(privateKey); sig.updateString(msg) const signatureHex = sig.sign() verify
const publicKey = &amp;#34;-----BEGIN PUBLIC KEY-----(your public key)&amp;#34; const sig2 = new KJUR.crypto.Signature({&amp;#34;alg&amp;#34;: &amp;#34;SHA256withRSA&amp;#34;}); sig2.init(publicKey); sig2.updateString(msg) const isValid = sig2.</description>
    </item>
    
    <item>
      <title>SSL双向验证-Nginx反向代理docker-sock</title>
      <link>http://wlchn.github.io/posts/ssl-nginx-proxy-docker/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>http://wlchn.github.io/posts/ssl-nginx-proxy-docker/</guid>
      <description>不做验证的代理（不安全、可内网使用） nginx 的用户 www-data 在组 www-data 中，而 docker.sock 的用户在 docker 组中，所以需要将 www-data 添加到 docker 组中
sudo usermod -a -G www-data,docker www-data 查看用户以及组
compgen -u compgen -g nginx 的配置
server { listen 23750; location / { proxy_pass http://unix:/var/run/docker.sock:/; } } 重启 nginx 即可。
做验证的代理（外网暴露安全） 按照https://docs.docker.com/engine/security/https/#create-a-ca-server-and-client-keys-with-openssl生成ca证书以及RSA证书
ca-key.pem ca.pem cert.pem key.pem server-cert.pem server-key.pem 配置 nginx 证书，ssl_verify_client 与 ssl_client_certificate 实现验证客户端，如客户端没有自签私钥则不能访问。
server { listen 23760; ssl on; ssl_certificate /home/deployer/docker-ca/server-cert.pem; ssl_certificate_key /home/deployer/docker-ca/server-key.pem; ssl_client_certificate /home/deployer/docker-ca/ca.pem; ssl_verify_client on; ssl_protocols TLSv1 TLSv1.</description>
    </item>
    
  </channel>
</rss>
